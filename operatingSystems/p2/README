This project is designed to showcase race conditions among child processes.
Each child process has a time for when it is supposed to terminate.
semaphores are used a locking mechanism to ensure that only process is in a critical section at a time.
Once a child process is in its critical section, it will write a message to a shared message buffer, and terminate.
If the message buffer is full from another child process, then it will have to wait in its critical section until it is allowed
to write to the buffer.

For this project, I decided to use an unamed SysV semaphore, because I was unable to get the named POSIX semaphore to work properly.

I tried my best to modularize my code, so all of the function definitions are below main.

I have also tried my best to comment out the code as much as possible to explain the logic.


To run:

start by running 'make'

call with -s for number of processes to have running at one time

use -l to choose the name of your logfile, otherwise it is defaulted to log.txt (make clean will remove that file)

use -t to change the time on for the alarm on the signal handler to terminate the program

(TO RUN A SECOND TIME, TYPE: 'make clean')
